{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VOverlay/locationStrategies.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Composables\nimport { useToggleScope } from \"../../composables/toggleScope.mjs\"; // Utilities\nimport { computed, nextTick, onScopeDispose, ref, watch } from 'vue';\nimport { anchorToPoint, getOffset } from \"./util/point.mjs\";\nimport { clamp, consoleError, convertToUnit, destructComputed, flipAlign, flipCorner, flipSide, getAxis, getScrollParents, IN_BROWSER, isFixedPosition, nullifyTransforms, parseAnchor, propsFactory } from \"../../util/index.mjs\";\nimport { Box, getOverflow, getTargetBox } from \"../../util/box.mjs\"; // Types\nconst locationStrategies = {\n  static: staticLocationStrategy,\n  // specific viewport position, usually centered\n  connected: connectedLocationStrategy // connected to a certain element\n};\n\nexport const makeLocationStrategyProps = propsFactory({\n  locationStrategy: {\n    type: [String, Function],\n    default: 'static',\n    validator: val => typeof val === 'function' || val in locationStrategies\n  },\n  location: {\n    type: String,\n    default: 'bottom'\n  },\n  origin: {\n    type: String,\n    default: 'auto'\n  },\n  offset: [Number, String, Array]\n}, 'VOverlay-location-strategies');\nexport function useLocationStrategies(props, data) {\n  const contentStyles = ref({});\n  const updateLocation = ref();\n  if (IN_BROWSER) {\n    useToggleScope(() => !!(data.isActive.value && props.locationStrategy), reset => {\n      watch(() => props.locationStrategy, reset);\n      onScopeDispose(() => {\n        updateLocation.value = undefined;\n      });\n      if (typeof props.locationStrategy === 'function') {\n        updateLocation.value = props.locationStrategy(data, props, contentStyles)?.updateLocation;\n      } else {\n        updateLocation.value = locationStrategies[props.locationStrategy](data, props, contentStyles)?.updateLocation;\n      }\n    });\n    window.addEventListener('resize', onResize, {\n      passive: true\n    });\n    onScopeDispose(() => {\n      window.removeEventListener('resize', onResize);\n      updateLocation.value = undefined;\n    });\n  }\n  function onResize(e) {\n    updateLocation.value?.(e);\n  }\n  return {\n    contentStyles,\n    updateLocation\n  };\n}\nfunction staticLocationStrategy() {\n  // TODO\n}\n\n/** Get size of element ignoring max-width/max-height */\nfunction getIntrinsicSize(el, isRtl) {\n  // const scrollables = new Map<Element, [number, number]>()\n  // el.querySelectorAll('*').forEach(el => {\n  //   const x = el.scrollLeft\n  //   const y = el.scrollTop\n  //   if (x || y) {\n  //     scrollables.set(el, [x, y])\n  //   }\n  // })\n\n  // const initialMaxWidth = el.style.maxWidth\n  // const initialMaxHeight = el.style.maxHeight\n  // el.style.removeProperty('max-width')\n  // el.style.removeProperty('max-height')\n\n  if (isRtl) {\n    el.style.removeProperty('left');\n  } else {\n    el.style.removeProperty('right');\n  }\n\n  /* eslint-disable-next-line sonarjs/prefer-immediate-return */\n  const contentBox = nullifyTransforms(el);\n  if (isRtl) {\n    contentBox.x += parseFloat(el.style.right || 0);\n  } else {\n    contentBox.x -= parseFloat(el.style.left || 0);\n  }\n  contentBox.y -= parseFloat(el.style.top || 0);\n\n  // el.style.maxWidth = initialMaxWidth\n  // el.style.maxHeight = initialMaxHeight\n  // scrollables.forEach((position, el) => {\n  //   el.scrollTo(...position)\n  // })\n\n  return contentBox;\n}\nfunction connectedLocationStrategy(data, props, contentStyles) {\n  const activatorFixed = Array.isArray(data.target.value) || isFixedPosition(data.target.value);\n  if (activatorFixed) {\n    Object.assign(contentStyles.value, {\n      position: 'fixed',\n      top: 0,\n      [data.isRtl.value ? 'right' : 'left']: 0\n    });\n  }\n  const {\n    preferredAnchor,\n    preferredOrigin\n  } = destructComputed(() => {\n    const parsedAnchor = parseAnchor(props.location, data.isRtl.value);\n    const parsedOrigin = props.origin === 'overlap' ? parsedAnchor : props.origin === 'auto' ? flipSide(parsedAnchor) : parseAnchor(props.origin, data.isRtl.value);\n\n    // Some combinations of props may produce an invalid origin\n    if (parsedAnchor.side === parsedOrigin.side && parsedAnchor.align === flipAlign(parsedOrigin).align) {\n      return {\n        preferredAnchor: flipCorner(parsedAnchor),\n        preferredOrigin: flipCorner(parsedOrigin)\n      };\n    } else {\n      return {\n        preferredAnchor: parsedAnchor,\n        preferredOrigin: parsedOrigin\n      };\n    }\n  });\n  const [minWidth, minHeight, maxWidth, maxHeight] = ['minWidth', 'minHeight', 'maxWidth', 'maxHeight'].map(key => {\n    return computed(() => {\n      const val = parseFloat(props[key]);\n      return isNaN(val) ? Infinity : val;\n    });\n  });\n  const offset = computed(() => {\n    if (Array.isArray(props.offset)) {\n      return props.offset;\n    }\n    if (typeof props.offset === 'string') {\n      const offset = props.offset.split(' ').map(parseFloat);\n      if (offset.length < 2) offset.push(0);\n      return offset;\n    }\n    return typeof props.offset === 'number' ? [props.offset, 0] : [0, 0];\n  });\n  let observe = false;\n  const observer = new ResizeObserver(() => {\n    if (observe) updateLocation();\n  });\n  watch([data.target, data.contentEl], (_ref, _ref2) => {\n    let [newTarget, newContentEl] = _ref;\n    let [oldTarget, oldContentEl] = _ref2;\n    if (oldTarget && !Array.isArray(oldTarget)) observer.unobserve(oldTarget);\n    if (newTarget && !Array.isArray(newTarget)) observer.observe(newTarget);\n    if (oldContentEl) observer.unobserve(oldContentEl);\n    if (newContentEl) observer.observe(newContentEl);\n  }, {\n    immediate: true\n  });\n  onScopeDispose(() => {\n    observer.disconnect();\n  });\n\n  // eslint-disable-next-line max-statements\n  function updateLocation() {\n    observe = false;\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => observe = true);\n    });\n    if (!data.target.value || !data.contentEl.value) return;\n    const targetBox = getTargetBox(data.target.value);\n    const contentBox = getIntrinsicSize(data.contentEl.value, data.isRtl.value);\n    const scrollParents = getScrollParents(data.contentEl.value);\n    const viewportMargin = 12;\n    if (!scrollParents.length) {\n      scrollParents.push(document.documentElement);\n      if (!(data.contentEl.value.style.top && data.contentEl.value.style.left)) {\n        contentBox.x -= parseFloat(document.documentElement.style.getPropertyValue('--v-body-scroll-x') || 0);\n        contentBox.y -= parseFloat(document.documentElement.style.getPropertyValue('--v-body-scroll-y') || 0);\n      }\n    }\n    const viewport = scrollParents.reduce((box, el) => {\n      const rect = el.getBoundingClientRect();\n      const scrollBox = new Box({\n        x: el === document.documentElement ? 0 : rect.x,\n        y: el === document.documentElement ? 0 : rect.y,\n        width: el.clientWidth,\n        height: el.clientHeight\n      });\n      if (box) {\n        return new Box({\n          x: Math.max(box.left, scrollBox.left),\n          y: Math.max(box.top, scrollBox.top),\n          width: Math.min(box.right, scrollBox.right) - Math.max(box.left, scrollBox.left),\n          height: Math.min(box.bottom, scrollBox.bottom) - Math.max(box.top, scrollBox.top)\n        });\n      }\n      return scrollBox;\n    }, undefined);\n    viewport.x += viewportMargin;\n    viewport.y += viewportMargin;\n    viewport.width -= viewportMargin * 2;\n    viewport.height -= viewportMargin * 2;\n    let placement = {\n      anchor: preferredAnchor.value,\n      origin: preferredOrigin.value\n    };\n    function checkOverflow(_placement) {\n      const box = new Box(contentBox);\n      const targetPoint = anchorToPoint(_placement.anchor, targetBox);\n      const contentPoint = anchorToPoint(_placement.origin, box);\n      let {\n        x,\n        y\n      } = getOffset(targetPoint, contentPoint);\n      switch (_placement.anchor.side) {\n        case 'top':\n          y -= offset.value[0];\n          break;\n        case 'bottom':\n          y += offset.value[0];\n          break;\n        case 'left':\n          x -= offset.value[0];\n          break;\n        case 'right':\n          x += offset.value[0];\n          break;\n      }\n      switch (_placement.anchor.align) {\n        case 'top':\n          y -= offset.value[1];\n          break;\n        case 'bottom':\n          y += offset.value[1];\n          break;\n        case 'left':\n          x -= offset.value[1];\n          break;\n        case 'right':\n          x += offset.value[1];\n          break;\n      }\n      box.x += x;\n      box.y += y;\n      box.width = Math.min(box.width, maxWidth.value);\n      box.height = Math.min(box.height, maxHeight.value);\n      const overflows = getOverflow(box, viewport);\n      return {\n        overflows,\n        x,\n        y\n      };\n    }\n    let x = 0;\n    let y = 0;\n    const available = {\n      x: 0,\n      y: 0\n    };\n    const flipped = {\n      x: false,\n      y: false\n    };\n    let resets = -1;\n    while (true) {\n      if (resets++ > 10) {\n        consoleError('Infinite loop detected in connectedLocationStrategy');\n        break;\n      }\n      const {\n        x: _x,\n        y: _y,\n        overflows\n      } = checkOverflow(placement);\n      x += _x;\n      y += _y;\n      contentBox.x += _x;\n      contentBox.y += _y;\n\n      // flip\n      {\n        const axis = getAxis(placement.anchor);\n        const hasOverflowX = overflows.x.before || overflows.x.after;\n        const hasOverflowY = overflows.y.before || overflows.y.after;\n        let reset = false;\n        ['x', 'y'].forEach(key => {\n          if (key === 'x' && hasOverflowX && !flipped.x || key === 'y' && hasOverflowY && !flipped.y) {\n            const newPlacement = {\n              anchor: {\n                ...placement.anchor\n              },\n              origin: {\n                ...placement.origin\n              }\n            };\n            const flip = key === 'x' ? axis === 'y' ? flipAlign : flipSide : axis === 'y' ? flipSide : flipAlign;\n            newPlacement.anchor = flip(newPlacement.anchor);\n            newPlacement.origin = flip(newPlacement.origin);\n            const {\n              overflows: newOverflows\n            } = checkOverflow(newPlacement);\n            if (newOverflows[key].before <= overflows[key].before && newOverflows[key].after <= overflows[key].after || newOverflows[key].before + newOverflows[key].after < (overflows[key].before + overflows[key].after) / 2) {\n              placement = newPlacement;\n              reset = flipped[key] = true;\n            }\n          }\n        });\n        if (reset) continue;\n      }\n\n      // shift\n      if (overflows.x.before) {\n        x += overflows.x.before;\n        contentBox.x += overflows.x.before;\n      }\n      if (overflows.x.after) {\n        x -= overflows.x.after;\n        contentBox.x -= overflows.x.after;\n      }\n      if (overflows.y.before) {\n        y += overflows.y.before;\n        contentBox.y += overflows.y.before;\n      }\n      if (overflows.y.after) {\n        y -= overflows.y.after;\n        contentBox.y -= overflows.y.after;\n      }\n\n      // size\n      {\n        const overflows = getOverflow(contentBox, viewport);\n        available.x = viewport.width - overflows.x.before - overflows.x.after;\n        available.y = viewport.height - overflows.y.before - overflows.y.after;\n        x += overflows.x.before;\n        contentBox.x += overflows.x.before;\n        y += overflows.y.before;\n        contentBox.y += overflows.y.before;\n      }\n      break;\n    }\n    const axis = getAxis(placement.anchor);\n    Object.assign(contentStyles.value, {\n      '--v-overlay-anchor-origin': `${placement.anchor.side} ${placement.anchor.align}`,\n      transformOrigin: `${placement.origin.side} ${placement.origin.align}`,\n      // transform: `translate(${pixelRound(x)}px, ${pixelRound(y)}px)`,\n      top: convertToUnit(pixelRound(y)),\n      left: data.isRtl.value ? undefined : convertToUnit(pixelRound(x)),\n      right: data.isRtl.value ? convertToUnit(pixelRound(-x)) : undefined,\n      minWidth: convertToUnit(axis === 'y' ? Math.min(minWidth.value, targetBox.width) : minWidth.value),\n      maxWidth: convertToUnit(pixelCeil(clamp(available.x, minWidth.value === Infinity ? 0 : minWidth.value, maxWidth.value))),\n      maxHeight: convertToUnit(pixelCeil(clamp(available.y, minHeight.value === Infinity ? 0 : minHeight.value, maxHeight.value)))\n    });\n    return {\n      available,\n      contentBox\n    };\n  }\n  watch(() => [preferredAnchor.value, preferredOrigin.value, props.offset, props.minWidth, props.minHeight, props.maxWidth, props.maxHeight], () => updateLocation());\n  nextTick(() => {\n    const result = updateLocation();\n\n    // TODO: overflowing content should only require a single updateLocation call\n    // Icky hack to make sure the content is positioned consistently\n    if (!result) return;\n    const {\n      available,\n      contentBox\n    } = result;\n    if (contentBox.height > available.y) {\n      requestAnimationFrame(() => {\n        updateLocation();\n        requestAnimationFrame(() => {\n          updateLocation();\n        });\n      });\n    }\n  });\n  return {\n    updateLocation\n  };\n}\nfunction pixelRound(val) {\n  return Math.round(val * devicePixelRatio) / devicePixelRatio;\n}\nfunction pixelCeil(val) {\n  return Math.ceil(val * devicePixelRatio) / devicePixelRatio;\n}\n//# sourceMappingURL=locationStrategies.mjs.map",
      "start": 1724959191899,
      "end": 1724959192077,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1724959192077,
      "end": 1724959192077,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1724959192077,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1724959192078,
      "end": 1724959192078,
      "order": "normal"
    }
  ]
}
