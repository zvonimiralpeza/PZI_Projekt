{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VDialog/VDialog.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VDialog.css\";\n\n// Components\nimport { VDialogTransition } from \"../transitions/index.mjs\";\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\"; // Composables\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\"; // Utilities\nimport { computed, mergeProps, nextTick, ref, watch } from 'vue';\nimport { focusableChildren, genericComponent, IN_BROWSER, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVDialogProps = propsFactory({\n  fullscreen: Boolean,\n  retainFocus: {\n    type: Boolean,\n    default: true\n  },\n  scrollable: Boolean,\n  ...makeVOverlayProps({\n    origin: 'center center',\n    scrollStrategy: 'block',\n    transition: {\n      component: VDialogTransition\n    },\n    zIndex: 2400\n  })\n}, 'VDialog');\nexport const VDialog = genericComponent()({\n  name: 'VDialog',\n  props: makeVDialogProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      scopeId\n    } = useScopeId();\n    const overlay = ref();\n    function onFocusin(e) {\n      const before = e.relatedTarget;\n      const after = e.target;\n      if (before !== after && overlay.value?.contentEl &&\n      // We're the topmost dialog\n      overlay.value?.globalTop &&\n      // It isn't the document or the dialog body\n      ![document, overlay.value.contentEl].includes(after) &&\n      // It isn't inside the dialog body\n      !overlay.value.contentEl.contains(after)) {\n        const focusable = focusableChildren(overlay.value.contentEl);\n        if (!focusable.length) return;\n        const firstElement = focusable[0];\n        const lastElement = focusable[focusable.length - 1];\n        if (before === firstElement) {\n          lastElement.focus();\n        } else {\n          firstElement.focus();\n        }\n      }\n    }\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val ? document.addEventListener('focusin', onFocusin) : document.removeEventListener('focusin', onFocusin);\n      }, {\n        immediate: true\n      });\n    }\n    watch(isActive, async val => {\n      await nextTick();\n      if (val) {\n        overlay.value.contentEl?.focus({\n          preventScroll: true\n        });\n      } else {\n        overlay.value.activatorEl?.focus({\n          preventScroll: true\n        });\n      }\n    });\n    const activatorProps = computed(() => mergeProps({\n      'aria-haspopup': 'dialog',\n      'aria-expanded': String(isActive.value)\n    }, props.activatorProps));\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-dialog', {\n          'v-dialog--fullscreen': props.fullscreen,\n          'v-dialog--scrollable': props.scrollable\n        }, props.class],\n        \"style\": props.style\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"aria-modal\": \"true\",\n        \"activatorProps\": activatorProps.value,\n        \"role\": \"dialog\"\n      }, scopeId), {\n        activator: slots.activator,\n        default: function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          return _createVNode(VDefaultsProvider, {\n            \"root\": \"VDialog\"\n          }, {\n            default: () => [slots.default?.(...args)]\n          });\n        }\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n});\n//# sourceMappingURL=VDialog.mjs.map",
      "start": 1726415494536,
      "end": 1726415498305,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726415498305,
      "end": 1726415498305,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726415498306,
      "end": 1726415498306,
      "order": "normal"
    }
  ]
}
