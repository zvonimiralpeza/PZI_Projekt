{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/composables/date/adapters/vuetify.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Utilities\nimport { createRange, padStart } from \"../../../util/index.mjs\"; // Types\nconst firstDay = {\n  '001': 1,\n  AD: 1,\n  AE: 6,\n  AF: 6,\n  AG: 0,\n  AI: 1,\n  AL: 1,\n  AM: 1,\n  AN: 1,\n  AR: 1,\n  AS: 0,\n  AT: 1,\n  AU: 1,\n  AX: 1,\n  AZ: 1,\n  BA: 1,\n  BD: 0,\n  BE: 1,\n  BG: 1,\n  BH: 6,\n  BM: 1,\n  BN: 1,\n  BR: 0,\n  BS: 0,\n  BT: 0,\n  BW: 0,\n  BY: 1,\n  BZ: 0,\n  CA: 0,\n  CH: 1,\n  CL: 1,\n  CM: 1,\n  CN: 1,\n  CO: 0,\n  CR: 1,\n  CY: 1,\n  CZ: 1,\n  DE: 1,\n  DJ: 6,\n  DK: 1,\n  DM: 0,\n  DO: 0,\n  DZ: 6,\n  EC: 1,\n  EE: 1,\n  EG: 6,\n  ES: 1,\n  ET: 0,\n  FI: 1,\n  FJ: 1,\n  FO: 1,\n  FR: 1,\n  GB: 1,\n  'GB-alt-variant': 0,\n  GE: 1,\n  GF: 1,\n  GP: 1,\n  GR: 1,\n  GT: 0,\n  GU: 0,\n  HK: 0,\n  HN: 0,\n  HR: 1,\n  HU: 1,\n  ID: 0,\n  IE: 1,\n  IL: 0,\n  IN: 0,\n  IQ: 6,\n  IR: 6,\n  IS: 1,\n  IT: 1,\n  JM: 0,\n  JO: 6,\n  JP: 0,\n  KE: 0,\n  KG: 1,\n  KH: 0,\n  KR: 0,\n  KW: 6,\n  KZ: 1,\n  LA: 0,\n  LB: 1,\n  LI: 1,\n  LK: 1,\n  LT: 1,\n  LU: 1,\n  LV: 1,\n  LY: 6,\n  MC: 1,\n  MD: 1,\n  ME: 1,\n  MH: 0,\n  MK: 1,\n  MM: 0,\n  MN: 1,\n  MO: 0,\n  MQ: 1,\n  MT: 0,\n  MV: 5,\n  MX: 0,\n  MY: 1,\n  MZ: 0,\n  NI: 0,\n  NL: 1,\n  NO: 1,\n  NP: 0,\n  NZ: 1,\n  OM: 6,\n  PA: 0,\n  PE: 0,\n  PH: 0,\n  PK: 0,\n  PL: 1,\n  PR: 0,\n  PT: 0,\n  PY: 0,\n  QA: 6,\n  RE: 1,\n  RO: 1,\n  RS: 1,\n  RU: 1,\n  SA: 0,\n  SD: 6,\n  SE: 1,\n  SG: 0,\n  SI: 1,\n  SK: 1,\n  SM: 1,\n  SV: 0,\n  SY: 6,\n  TH: 0,\n  TJ: 1,\n  TM: 1,\n  TR: 1,\n  TT: 0,\n  TW: 0,\n  UA: 1,\n  UM: 0,\n  US: 0,\n  UY: 1,\n  UZ: 1,\n  VA: 1,\n  VE: 0,\n  VI: 0,\n  VN: 1,\n  WS: 0,\n  XK: 1,\n  YE: 0,\n  ZA: 0,\n  ZW: 0\n};\nfunction getWeekArray(date, locale) {\n  const weeks = [];\n  let currentWeek = [];\n  const firstDayOfMonth = startOfMonth(date);\n  const lastDayOfMonth = endOfMonth(date);\n  const firstDayWeekIndex = (firstDayOfMonth.getDay() - firstDay[locale.slice(-2).toUpperCase()] + 7) % 7;\n  const lastDayWeekIndex = (lastDayOfMonth.getDay() - firstDay[locale.slice(-2).toUpperCase()] + 7) % 7;\n  for (let i = 0; i < firstDayWeekIndex; i++) {\n    const adjacentDay = new Date(firstDayOfMonth);\n    adjacentDay.setDate(adjacentDay.getDate() - (firstDayWeekIndex - i));\n    currentWeek.push(adjacentDay);\n  }\n  for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {\n    const day = new Date(date.getFullYear(), date.getMonth(), i);\n\n    // Add the day to the current week\n    currentWeek.push(day);\n\n    // If the current week has 7 days, add it to the weeks array and start a new week\n    if (currentWeek.length === 7) {\n      weeks.push(currentWeek);\n      currentWeek = [];\n    }\n  }\n  for (let i = 1; i < 7 - lastDayWeekIndex; i++) {\n    const adjacentDay = new Date(lastDayOfMonth);\n    adjacentDay.setDate(adjacentDay.getDate() + i);\n    currentWeek.push(adjacentDay);\n  }\n  if (currentWeek.length > 0) {\n    weeks.push(currentWeek);\n  }\n  return weeks;\n}\nfunction startOfMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth(), 1);\n}\nfunction endOfMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n}\nfunction parseLocalDate(value) {\n  const parts = value.split('-').map(Number);\n\n  // new Date() uses local time zone when passing individual date component values\n  return new Date(parts[0], parts[1] - 1, parts[2]);\n}\nconst _YYYMMDD = /^([12]\\d{3}-([1-9]|0[1-9]|1[0-2])-([1-9]|0[1-9]|[12]\\d|3[01]))$/;\nfunction date(value) {\n  if (value == null) return new Date();\n  if (value instanceof Date) return value;\n  if (typeof value === 'string') {\n    let parsed;\n    if (_YYYMMDD.test(value)) {\n      return parseLocalDate(value);\n    } else {\n      parsed = Date.parse(value);\n    }\n    if (!isNaN(parsed)) return new Date(parsed);\n  }\n  return null;\n}\nconst sundayJanuarySecond2000 = new Date(2000, 0, 2);\nfunction getWeekdays(locale) {\n  const daysFromSunday = firstDay[locale.slice(-2).toUpperCase()];\n  return createRange(7).map(i => {\n    const weekday = new Date(sundayJanuarySecond2000);\n    weekday.setDate(sundayJanuarySecond2000.getDate() + daysFromSunday + i);\n    return new Intl.DateTimeFormat(locale, {\n      weekday: 'narrow'\n    }).format(weekday);\n  });\n}\nfunction format(value, formatString, locale, formats) {\n  const newDate = date(value) ?? new Date();\n  const customFormat = formats?.[formatString];\n  if (typeof customFormat === 'function') {\n    return customFormat(newDate, formatString, locale);\n  }\n  let options = {};\n  switch (formatString) {\n    case 'fullDateWithWeekday':\n      options = {\n        weekday: 'long',\n        day: 'numeric',\n        month: 'long',\n        year: 'numeric'\n      };\n      break;\n    case 'normalDateWithWeekday':\n      options = {\n        weekday: 'short',\n        day: 'numeric',\n        month: 'short'\n      };\n      break;\n    case 'keyboardDate':\n      options = {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n      };\n      break;\n    case 'monthAndDate':\n      options = {\n        month: 'long',\n        day: 'numeric'\n      };\n      break;\n    case 'monthAndYear':\n      options = {\n        month: 'long',\n        year: 'numeric'\n      };\n      break;\n    case 'month':\n      options = {\n        month: 'long'\n      };\n      break;\n    case 'monthShort':\n      options = {\n        month: 'short'\n      };\n      break;\n    case 'dayOfMonth':\n      options = {\n        day: 'numeric'\n      };\n      break;\n    case 'shortDate':\n      options = {\n        year: '2-digit',\n        month: 'numeric',\n        day: 'numeric'\n      };\n      break;\n    case 'year':\n      options = {\n        year: 'numeric'\n      };\n      break;\n    default:\n      options = customFormat ?? {\n        timeZone: 'UTC',\n        timeZoneName: 'short'\n      };\n  }\n  return new Intl.DateTimeFormat(locale, options).format(newDate);\n}\nfunction toISO(adapter, value) {\n  const date = adapter.toJsDate(value);\n  const year = date.getFullYear();\n  const month = padStart(String(date.getMonth() + 1), 2, '0');\n  const day = padStart(String(date.getDate()), 2, '0');\n  return `${year}-${month}-${day}`;\n}\nfunction parseISO(value) {\n  const [year, month, day] = value.split('-').map(Number);\n  return new Date(year, month - 1, day);\n}\nfunction addDays(date, amount) {\n  const d = new Date(date);\n  d.setDate(d.getDate() + amount);\n  return d;\n}\nfunction addMonths(date, amount) {\n  const d = new Date(date);\n  d.setMonth(d.getMonth() + amount);\n  return d;\n}\nfunction getYear(date) {\n  return date.getFullYear();\n}\nfunction getMonth(date) {\n  return date.getMonth();\n}\nfunction getNextMonth(date) {\n  return new Date(date.getFullYear(), date.getMonth() + 1, 1);\n}\nfunction startOfYear(date) {\n  return new Date(date.getFullYear(), 0, 1);\n}\nfunction endOfYear(date) {\n  return new Date(date.getFullYear(), 11, 31);\n}\nfunction isWithinRange(date, range) {\n  return isAfter(date, range[0]) && isBefore(date, range[1]);\n}\nfunction isValid(date) {\n  const d = new Date(date);\n  return d instanceof Date && !isNaN(d.getTime());\n}\nfunction isAfter(date, comparing) {\n  return date.getTime() > comparing.getTime();\n}\nfunction isBefore(date, comparing) {\n  return date.getTime() < comparing.getTime();\n}\nfunction isEqual(date, comparing) {\n  return date.getTime() === comparing.getTime();\n}\nfunction isSameDay(date, comparing) {\n  return date.getDate() === comparing.getDate() && date.getMonth() === comparing.getMonth() && date.getFullYear() === comparing.getFullYear();\n}\nfunction isSameMonth(date, comparing) {\n  return date.getMonth() === comparing.getMonth() && date.getFullYear() === comparing.getFullYear();\n}\nfunction getDiff(date, comparing, unit) {\n  const d = new Date(date);\n  const c = new Date(comparing);\n  if (unit === 'month') {\n    return d.getMonth() - c.getMonth() + (d.getFullYear() - c.getFullYear()) * 12;\n  }\n  return Math.floor((d.getTime() - c.getTime()) / (1000 * 60 * 60 * 24));\n}\nfunction setMonth(date, count) {\n  const d = new Date(date);\n  d.setMonth(count);\n  return d;\n}\nfunction setYear(date, year) {\n  const d = new Date(date);\n  d.setFullYear(year);\n  return d;\n}\nfunction startOfDay(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\nfunction endOfDay(date) {\n  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);\n}\nexport class VuetifyDateAdapter {\n  constructor(options) {\n    this.locale = options.locale;\n    this.formats = options.formats;\n  }\n  date(value) {\n    return date(value);\n  }\n  toJsDate(date) {\n    return date;\n  }\n  toISO(date) {\n    return toISO(this, date);\n  }\n  parseISO(date) {\n    return parseISO(date);\n  }\n  addDays(date, amount) {\n    return addDays(date, amount);\n  }\n  addMonths(date, amount) {\n    return addMonths(date, amount);\n  }\n  getWeekArray(date) {\n    return getWeekArray(date, this.locale);\n  }\n  startOfMonth(date) {\n    return startOfMonth(date);\n  }\n  endOfMonth(date) {\n    return endOfMonth(date);\n  }\n  format(date, formatString) {\n    return format(date, formatString, this.locale, this.formats);\n  }\n  isEqual(date, comparing) {\n    return isEqual(date, comparing);\n  }\n  isValid(date) {\n    return isValid(date);\n  }\n  isWithinRange(date, range) {\n    return isWithinRange(date, range);\n  }\n  isAfter(date, comparing) {\n    return isAfter(date, comparing);\n  }\n  isBefore(date, comparing) {\n    return !isAfter(date, comparing) && !isEqual(date, comparing);\n  }\n  isSameDay(date, comparing) {\n    return isSameDay(date, comparing);\n  }\n  isSameMonth(date, comparing) {\n    return isSameMonth(date, comparing);\n  }\n  setMonth(date, count) {\n    return setMonth(date, count);\n  }\n  setYear(date, year) {\n    return setYear(date, year);\n  }\n  getDiff(date, comparing, unit) {\n    return getDiff(date, comparing, unit);\n  }\n  getWeekdays() {\n    return getWeekdays(this.locale);\n  }\n  getYear(date) {\n    return getYear(date);\n  }\n  getMonth(date) {\n    return getMonth(date);\n  }\n  getNextMonth(date) {\n    return getNextMonth(date);\n  }\n  startOfDay(date) {\n    return startOfDay(date);\n  }\n  endOfDay(date) {\n    return endOfDay(date);\n  }\n  startOfYear(date) {\n    return startOfYear(date);\n  }\n  endOfYear(date) {\n    return endOfYear(date);\n  }\n}\n//# sourceMappingURL=vuetify.mjs.map",
      "start": 1726158904415,
      "end": 1726158904571,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726158904571,
      "end": 1726158904571,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726158904572,
      "end": 1726158904572,
      "order": "normal"
    }
  ]
}
