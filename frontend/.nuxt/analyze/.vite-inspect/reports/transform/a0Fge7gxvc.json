{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VField/VField.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, Fragment as _Fragment, withDirectives as _withDirectives, vShow as _vShow, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VField.css\";\n\n// Components\nimport { VFieldLabel } from \"./VFieldLabel.mjs\";\nimport { VExpandXTransition } from \"../transitions/index.mjs\";\nimport { useInputIcon } from \"../VInput/InputIcon.mjs\"; // Composables\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { LoaderSlot, makeLoaderProps, useLoader } from \"../../composables/loader.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\"; // Utilities\nimport { computed, ref, toRef, watch } from 'vue';\nimport { animate, convertToUnit, EventProp, genericComponent, getUid, isOn, nullifyTransforms, pick, propsFactory, standardEasing, useRender } from \"../../util/index.mjs\"; // Types\nconst allowedVariants = ['underlined', 'outlined', 'filled', 'solo', 'solo-inverted', 'solo-filled', 'plain'];\nexport const makeVFieldProps = propsFactory({\n  appendInnerIcon: IconValue,\n  bgColor: String,\n  clearable: Boolean,\n  clearIcon: {\n    type: IconValue,\n    default: '$clear'\n  },\n  active: Boolean,\n  centerAffix: {\n    type: Boolean,\n    default: undefined\n  },\n  color: String,\n  baseColor: String,\n  dirty: Boolean,\n  disabled: {\n    type: Boolean,\n    default: null\n  },\n  error: Boolean,\n  flat: Boolean,\n  label: String,\n  persistentClear: Boolean,\n  prependInnerIcon: IconValue,\n  reverse: Boolean,\n  singleLine: Boolean,\n  variant: {\n    type: String,\n    default: 'filled',\n    validator: v => allowedVariants.includes(v)\n  },\n  'onClick:clear': EventProp(),\n  'onClick:appendInner': EventProp(),\n  'onClick:prependInner': EventProp(),\n  ...makeComponentProps(),\n  ...makeLoaderProps(),\n  ...makeRoundedProps(),\n  ...makeThemeProps()\n}, 'VField');\nexport const VField = genericComponent()({\n  name: 'VField',\n  inheritAttrs: false,\n  props: {\n    id: String,\n    ...makeFocusProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'update:focused': focused => true,\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      loaderClasses\n    } = useLoader(props);\n    const {\n      focusClasses,\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const {\n      InputIcon\n    } = useInputIcon(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      rtlClasses\n    } = useRtl();\n    const isActive = computed(() => props.dirty || props.active);\n    const hasLabel = computed(() => !props.singleLine && !!(props.label || slots.label));\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const messagesId = computed(() => `${id.value}-messages`);\n    const labelRef = ref();\n    const floatingLabelRef = ref();\n    const controlRef = ref();\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant));\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'bgColor'));\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(computed(() => {\n      return props.error || props.disabled ? undefined : isActive.value && isFocused.value ? props.color : props.baseColor;\n    }));\n    watch(isActive, val => {\n      if (hasLabel.value) {\n        const el = labelRef.value.$el;\n        const targetEl = floatingLabelRef.value.$el;\n        requestAnimationFrame(() => {\n          const rect = nullifyTransforms(el);\n          const targetRect = targetEl.getBoundingClientRect();\n          const x = targetRect.x - rect.x;\n          const y = targetRect.y - rect.y - (rect.height / 2 - targetRect.height / 2);\n          const targetWidth = targetRect.width / 0.75;\n          const width = Math.abs(targetWidth - rect.width) > 1 ? {\n            maxWidth: convertToUnit(targetWidth)\n          } : undefined;\n          const style = getComputedStyle(el);\n          const targetStyle = getComputedStyle(targetEl);\n          const duration = parseFloat(style.transitionDuration) * 1000 || 150;\n          const scale = parseFloat(targetStyle.getPropertyValue('--v-field-label-scale'));\n          const color = targetStyle.getPropertyValue('color');\n          el.style.visibility = 'visible';\n          targetEl.style.visibility = 'hidden';\n          animate(el, {\n            transform: `translate(${x}px, ${y}px) scale(${scale})`,\n            color,\n            ...width\n          }, {\n            duration,\n            easing: standardEasing,\n            direction: val ? 'normal' : 'reverse'\n          }).finished.then(() => {\n            el.style.removeProperty('visibility');\n            targetEl.style.removeProperty('visibility');\n          });\n        });\n      }\n    }, {\n      flush: 'post'\n    });\n    const slotProps = computed(() => ({\n      isActive,\n      isFocused,\n      controlRef,\n      blur,\n      focus\n    }));\n    function onClick(e) {\n      if (e.target !== document.activeElement) {\n        e.preventDefault();\n      }\n    }\n    useRender(() => {\n      const isOutlined = props.variant === 'outlined';\n      const hasPrepend = slots['prepend-inner'] || props.prependInnerIcon;\n      const hasClear = !!(props.clearable || slots.clear);\n      const hasAppend = !!(slots['append-inner'] || props.appendInnerIcon || hasClear);\n      const label = () => slots.label ? slots.label({\n        ...slotProps.value,\n        label: props.label,\n        props: {\n          for: id.value\n        }\n      }) : props.label;\n      return _createVNode(\"div\", _mergeProps({\n        \"class\": ['v-field', {\n          'v-field--active': isActive.value,\n          'v-field--appended': hasAppend,\n          'v-field--center-affix': props.centerAffix ?? !isPlainOrUnderlined.value,\n          'v-field--disabled': props.disabled,\n          'v-field--dirty': props.dirty,\n          'v-field--error': props.error,\n          'v-field--flat': props.flat,\n          'v-field--has-background': !!props.bgColor,\n          'v-field--persistent-clear': props.persistentClear,\n          'v-field--prepended': hasPrepend,\n          'v-field--reverse': props.reverse,\n          'v-field--single-line': props.singleLine,\n          'v-field--no-label': !label(),\n          [`v-field--variant-${props.variant}`]: true\n        }, themeClasses.value, backgroundColorClasses.value, focusClasses.value, loaderClasses.value, roundedClasses.value, rtlClasses.value, props.class],\n        \"style\": [backgroundColorStyles.value, props.style],\n        \"onClick\": onClick\n      }, attrs), [_createVNode(\"div\", {\n        \"class\": \"v-field__overlay\"\n      }, null), _createVNode(LoaderSlot, {\n        \"name\": \"v-field\",\n        \"active\": !!props.loading,\n        \"color\": props.error ? 'error' : typeof props.loading === 'string' ? props.loading : props.color\n      }, {\n        default: slots.loader\n      }), hasPrepend && _createVNode(\"div\", {\n        \"key\": \"prepend\",\n        \"class\": \"v-field__prepend-inner\"\n      }, [props.prependInnerIcon && _createVNode(InputIcon, {\n        \"key\": \"prepend-icon\",\n        \"name\": \"prependInner\"\n      }, null), slots['prepend-inner']?.(slotProps.value)]), _createVNode(\"div\", {\n        \"class\": \"v-field__field\",\n        \"data-no-activator\": \"\"\n      }, [['filled', 'solo', 'solo-inverted', 'solo-filled'].includes(props.variant) && hasLabel.value && _createVNode(VFieldLabel, {\n        \"key\": \"floating-label\",\n        \"ref\": floatingLabelRef,\n        \"class\": [textColorClasses.value],\n        \"floating\": true,\n        \"for\": id.value,\n        \"style\": textColorStyles.value\n      }, {\n        default: () => [label()]\n      }), _createVNode(VFieldLabel, {\n        \"ref\": labelRef,\n        \"for\": id.value\n      }, {\n        default: () => [label()]\n      }), slots.default?.({\n        ...slotProps.value,\n        props: {\n          id: id.value,\n          class: 'v-field__input',\n          'aria-describedby': messagesId.value\n        },\n        focus,\n        blur\n      })]), hasClear && _createVNode(VExpandXTransition, {\n        \"key\": \"clear\"\n      }, {\n        default: () => [_withDirectives(_createVNode(\"div\", {\n          \"class\": \"v-field__clearable\",\n          \"onMousedown\": e => {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }, [slots.clear ? slots.clear() : _createVNode(InputIcon, {\n          \"name\": \"clear\"\n        }, null)]), [[_vShow, props.dirty]])]\n      }), hasAppend && _createVNode(\"div\", {\n        \"key\": \"append\",\n        \"class\": \"v-field__append-inner\"\n      }, [slots['append-inner']?.(slotProps.value), props.appendInnerIcon && _createVNode(InputIcon, {\n        \"key\": \"append-icon\",\n        \"name\": \"appendInner\"\n      }, null)]), _createVNode(\"div\", {\n        \"class\": ['v-field__outline', textColorClasses.value],\n        \"style\": textColorStyles.value\n      }, [isOutlined && _createVNode(_Fragment, null, [_createVNode(\"div\", {\n        \"class\": \"v-field__outline__start\"\n      }, null), hasLabel.value && _createVNode(\"div\", {\n        \"class\": \"v-field__outline__notch\"\n      }, [_createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"floating\": true,\n        \"for\": id.value\n      }, {\n        default: () => [label()]\n      })]), _createVNode(\"div\", {\n        \"class\": \"v-field__outline__end\"\n      }, null)]), isPlainOrUnderlined.value && hasLabel.value && _createVNode(VFieldLabel, {\n        \"ref\": floatingLabelRef,\n        \"floating\": true,\n        \"for\": id.value\n      }, {\n        default: () => [label()]\n      })])]);\n    });\n    return {\n      controlRef\n    };\n  }\n});\n// TODO: this is kinda slow, might be better to implicitly inherit props instead\nexport function filterFieldProps(attrs) {\n  const keys = Object.keys(VField.props).filter(k => !isOn(k) && k !== 'class' && k !== 'style');\n  return pick(attrs, keys);\n}\n//# sourceMappingURL=VField.mjs.map",
      "start": 1721076622383,
      "end": 1721076622586,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1721076622586,
      "end": 1721076622586,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1721076622587,
      "end": 1721076622587,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1721076622587,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1721076622588,
      "end": 1721076622588,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1721076622588,
      "end": 1721076622589,
      "order": "normal"
    }
  ]
}
