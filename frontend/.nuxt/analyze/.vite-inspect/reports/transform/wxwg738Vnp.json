{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VInput/VInput.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VInput.css\";\n\n// Components\nimport { useInputIcon } from \"./InputIcon.mjs\";\nimport { VMessages } from \"../VMessages/VMessages.mjs\"; // Composables\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { makeValidationProps, useValidation } from \"../../composables/validation.mjs\"; // Utilities\nimport { computed } from 'vue';\nimport { EventProp, genericComponent, getUid, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  centerAffix: {\n    type: Boolean,\n    default: true\n  },\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String],\n  hideSpinButtons: Boolean,\n  hint: String,\n  persistentHint: Boolean,\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['horizontal', 'vertical'].includes(v)\n  },\n  'onClick:prepend': EventProp(),\n  'onClick:append': EventProp(),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeValidationProps()\n}, 'VInput');\nexport const VInput = genericComponent()({\n  name: 'VInput',\n  props: {\n    ...makeVInputProps()\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      emit\n    } = _ref;\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      rtlClasses\n    } = useRtl();\n    const {\n      InputIcon\n    } = useInputIcon(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const messagesId = computed(() => `${id.value}-messages`);\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses\n    } = useValidation(props, 'v-input', id);\n    const slotProps = computed(() => ({\n      id,\n      messagesId,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate\n    }));\n    const messages = computed(() => {\n      if (props.errorMessages?.length || !isPristine.value && errorMessages.value.length) {\n        return errorMessages.value;\n      } else if (props.hint && (props.persistentHint || props.focused)) {\n        return props.hint;\n      } else {\n        return props.messages;\n      }\n    });\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon);\n      const hasAppend = !!(slots.append || props.appendIcon);\n      const hasMessages = messages.value.length > 0;\n      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && (hasMessages || !!slots.details);\n      return _createVNode(\"div\", {\n        \"class\": ['v-input', `v-input--${props.direction}`, {\n          'v-input--center-affix': props.centerAffix,\n          'v-input--hide-spin-buttons': props.hideSpinButtons\n        }, densityClasses.value, rtlClasses.value, validationClasses.value, props.class],\n        \"style\": props.style\n      }, [hasPrepend && _createVNode(\"div\", {\n        \"key\": \"prepend\",\n        \"class\": \"v-input__prepend\"\n      }, [slots.prepend?.(slotProps.value), props.prependIcon && _createVNode(InputIcon, {\n        \"key\": \"prepend-icon\",\n        \"name\": \"prepend\"\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-input__control\"\n      }, [slots.default?.(slotProps.value)]), hasAppend && _createVNode(\"div\", {\n        \"key\": \"append\",\n        \"class\": \"v-input__append\"\n      }, [props.appendIcon && _createVNode(InputIcon, {\n        \"key\": \"append-icon\",\n        \"name\": \"append\"\n      }, null), slots.append?.(slotProps.value)]), hasDetails && _createVNode(\"div\", {\n        \"class\": \"v-input__details\"\n      }, [_createVNode(VMessages, {\n        \"id\": messagesId.value,\n        \"active\": hasMessages,\n        \"messages\": messages.value\n      }, {\n        message: slots.message\n      }), slots.details?.(slotProps.value)])]);\n    });\n    return {\n      reset,\n      resetValidation,\n      validate,\n      isValid,\n      errorMessages\n    };\n  }\n});\n//# sourceMappingURL=VInput.mjs.map",
      "start": 1721076113155,
      "end": 1721076113358,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1721076113358,
      "end": 1721076113358,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1721076113358,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1721076113359,
      "end": 1721076113359,
      "order": "normal"
    }
  ]
}
