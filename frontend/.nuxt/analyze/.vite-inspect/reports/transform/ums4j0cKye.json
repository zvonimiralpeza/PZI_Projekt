{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VSnackbar/VSnackbar.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VSnackbar.css\";\n\n// Components\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VOverlay } from \"../VOverlay/index.mjs\";\nimport { makeVOverlayProps } from \"../VOverlay/VOverlay.mjs\";\nimport { VProgressLinear } from \"../VProgressLinear/index.mjs\"; // Composables\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { useScopeId } from \"../../composables/scopeId.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\"; // Utilities\nimport { mergeProps, nextTick, onMounted, onScopeDispose, ref, shallowRef, watch } from 'vue';\nimport { genericComponent, omit, propsFactory, refElement, useRender } from \"../../util/index.mjs\";\nfunction useCountdown(milliseconds) {\n  const time = shallowRef(milliseconds);\n  let timer = -1;\n  function clear() {\n    clearInterval(timer);\n  }\n  function reset() {\n    clear();\n    nextTick(() => time.value = milliseconds);\n  }\n  function start(el) {\n    const style = el ? getComputedStyle(el) : {\n      transitionDuration: 0.2\n    };\n    const interval = parseFloat(style.transitionDuration) * 1000 || 200;\n    clear();\n    if (time.value <= 0) return;\n    const startTime = performance.now();\n    timer = window.setInterval(() => {\n      const elapsed = performance.now() - startTime + interval;\n      time.value = Math.max(milliseconds - elapsed, 0);\n      if (time.value <= 0) clear();\n    }, interval);\n  }\n  onScopeDispose(clear);\n  return {\n    clear,\n    time,\n    start,\n    reset\n  };\n}\nexport const makeVSnackbarProps = propsFactory({\n  multiLine: Boolean,\n  text: String,\n  timer: [Boolean, String],\n  timeout: {\n    type: [Number, String],\n    default: 5000\n  },\n  vertical: Boolean,\n  ...makeLocationProps({\n    location: 'bottom'\n  }),\n  ...makePositionProps(),\n  ...makeRoundedProps(),\n  ...makeVariantProps(),\n  ...makeThemeProps(),\n  ...omit(makeVOverlayProps({\n    transition: 'v-snackbar-transition'\n  }), ['persistent', 'noClickAnimation', 'scrim', 'scrollStrategy'])\n}, 'VSnackbar');\nexport const VSnackbar = genericComponent()({\n  name: 'VSnackbar',\n  props: makeVSnackbarProps(),\n  emits: {\n    'update:modelValue': v => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const isActive = useProxiedModel(props, 'modelValue');\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      positionClasses\n    } = usePosition(props);\n    const {\n      scopeId\n    } = useScopeId();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const countdown = useCountdown(Number(props.timeout));\n    const overlay = ref();\n    const timerRef = ref();\n    const isHovering = shallowRef(false);\n    watch(isActive, startTimeout);\n    watch(() => props.timeout, startTimeout);\n    onMounted(() => {\n      if (isActive.value) startTimeout();\n    });\n    let activeTimeout = -1;\n    function startTimeout() {\n      countdown.reset();\n      window.clearTimeout(activeTimeout);\n      const timeout = Number(props.timeout);\n      if (!isActive.value || timeout === -1) return;\n      const element = refElement(timerRef.value);\n      countdown.start(element);\n      activeTimeout = window.setTimeout(() => {\n        isActive.value = false;\n      }, timeout);\n    }\n    function clearTimeout() {\n      countdown.reset();\n      window.clearTimeout(activeTimeout);\n    }\n    function onPointerenter() {\n      isHovering.value = true;\n      clearTimeout();\n    }\n    function onPointerleave() {\n      isHovering.value = false;\n      startTimeout();\n    }\n    useRender(() => {\n      const overlayProps = VOverlay.filterProps(props);\n      const hasContent = !!(slots.default || slots.text || props.text);\n      return _createVNode(VOverlay, _mergeProps({\n        \"ref\": overlay,\n        \"class\": ['v-snackbar', {\n          'v-snackbar--active': isActive.value,\n          'v-snackbar--multi-line': props.multiLine && !props.vertical,\n          'v-snackbar--timer': !!props.timer,\n          'v-snackbar--vertical': props.vertical\n        }, positionClasses.value, props.class],\n        \"style\": props.style\n      }, overlayProps, {\n        \"modelValue\": isActive.value,\n        \"onUpdate:modelValue\": $event => isActive.value = $event,\n        \"contentProps\": mergeProps({\n          class: ['v-snackbar__wrapper', themeClasses.value, colorClasses.value, roundedClasses.value, variantClasses.value],\n          style: [locationStyles.value, colorStyles.value],\n          onPointerenter,\n          onPointerleave\n        }, overlayProps.contentProps),\n        \"persistent\": true,\n        \"noClickAnimation\": true,\n        \"scrim\": false,\n        \"scrollStrategy\": \"none\",\n        \"_disableGlobalStack\": true\n      }, scopeId), {\n        default: () => [genOverlays(false, 'v-snackbar'), props.timer && _createVNode(\"div\", {\n          \"key\": \"timer\",\n          \"class\": \"v-snackbar__timer\"\n        }, [_createVNode(VProgressLinear, {\n          \"ref\": timerRef,\n          \"active\": !isHovering.value,\n          \"color\": typeof props.timer === 'string' ? props.timer : 'info',\n          \"max\": props.timeout,\n          \"model-value\": countdown.time.value\n        }, null)]), hasContent && _createVNode(\"div\", {\n          \"key\": \"content\",\n          \"class\": \"v-snackbar__content\",\n          \"role\": \"status\",\n          \"aria-live\": \"polite\"\n        }, [slots.text?.() ?? props.text, slots.default?.()]), slots.actions && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VBtn: {\n              variant: 'text',\n              ripple: false,\n              slim: true\n            }\n          }\n        }, {\n          default: () => [_createVNode(\"div\", {\n            \"class\": \"v-snackbar__actions\"\n          }, [slots.actions()])]\n        })],\n        activator: slots.activator\n      });\n    });\n    return forwardRefs({}, overlay);\n  }\n});\n//# sourceMappingURL=VSnackbar.mjs.map",
      "start": 1726412120159,
      "end": 1726412120451,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726412120452,
      "end": 1726412120452,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726412120453,
      "end": 1726412120453,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726412120453,
      "end": 1726412120454,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726412120454,
      "end": 1726412120454,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726412120454,
      "end": 1726412120454,
      "order": "normal"
    }
  ]
}
