{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/composables/nested/selectStrategies.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue';\nexport const independentSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref => {\n      let {\n        id,\n        value,\n        selected\n      } = _ref;\n      id = toRaw(id);\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref2) => {\n          let [key, value] = _ref2;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 1 && on[0] === id) return selected;\n      }\n      selected.set(id, value ? 'on' : 'off');\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n      return map;\n    },\n    out: v => {\n      const arr = [];\n      for (const [key, value] of v.entries()) {\n        if (value === 'on') arr.push(key);\n      }\n      return arr;\n    }\n  };\n  return strategy;\n};\nexport const independentSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref3 => {\n      let {\n        selected,\n        id,\n        ...rest\n      } = _ref3;\n      id = toRaw(id);\n      const singleSelected = selected.has(id) ? new Map([[id, selected.get(id)]]) : new Map();\n      return parentStrategy.select({\n        ...rest,\n        id,\n        selected: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n      if (v?.length) {\n        map = parentStrategy.in(v.slice(0, 1), children, parents);\n      }\n      return map;\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafSelectStrategy = mandatory => {\n  const parentStrategy = independentSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref4 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref4;\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleSelectStrategy = mandatory => {\n  const parentStrategy = independentSingleSelectStrategy(mandatory);\n  const strategy = {\n    select: _ref5 => {\n      let {\n        id,\n        selected,\n        children,\n        ...rest\n      } = _ref5;\n      id = toRaw(id);\n      if (children.has(id)) return selected;\n      return parentStrategy.select({\n        id,\n        selected,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const classicSelectStrategy = mandatory => {\n  const strategy = {\n    select: _ref6 => {\n      let {\n        id,\n        value,\n        selected,\n        children,\n        parents\n      } = _ref6;\n      id = toRaw(id);\n      const original = new Map(selected);\n      const items = [id];\n      while (items.length) {\n        const item = items.shift();\n        selected.set(item, value ? 'on' : 'off');\n        if (children.has(item)) {\n          items.push(...children.get(item));\n        }\n      }\n      let parent = parents.get(id);\n      while (parent) {\n        const childrenIds = children.get(parent);\n        const everySelected = childrenIds.every(cid => selected.get(cid) === 'on');\n        const noneSelected = childrenIds.every(cid => !selected.has(cid) || selected.get(cid) === 'off');\n        selected.set(parent, everySelected ? 'on' : noneSelected ? 'off' : 'indeterminate');\n        parent = parents.get(parent);\n      }\n\n      // If mandatory and planned deselect results in no selected\n      // items then we can't do it, so return original state\n      if (mandatory && !value) {\n        const on = Array.from(selected.entries()).reduce((arr, _ref7) => {\n          let [key, value] = _ref7;\n          return value === 'on' ? [...arr, key] : arr;\n        }, []);\n        if (on.length === 0) return original;\n      }\n      return selected;\n    },\n    in: (v, children, parents) => {\n      let map = new Map();\n      for (const id of v || []) {\n        map = strategy.select({\n          id,\n          value: true,\n          selected: new Map(map),\n          children,\n          parents\n        });\n      }\n      return map;\n    },\n    out: (v, children) => {\n      const arr = [];\n      for (const [key, value] of v.entries()) {\n        if (value === 'on' && !children.has(key)) arr.push(key);\n      }\n      return arr;\n    }\n  };\n  return strategy;\n};\n//# sourceMappingURL=selectStrategies.mjs.map",
      "start": 1720959837492,
      "end": 1720959837833,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1720959837833,
      "end": 1720959837833,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720959837833,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720959837834,
      "end": 1720959837834,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720959837834,
      "end": 1720959837835,
      "order": "normal"
    }
  ]
}
