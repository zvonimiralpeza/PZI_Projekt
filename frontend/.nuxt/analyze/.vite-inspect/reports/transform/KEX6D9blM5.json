{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/composables/scroll.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Utilities\nimport { computed, onBeforeUnmount, onMounted, ref, shallowRef, watch } from 'vue';\nimport { clamp, consoleWarn, propsFactory } from \"../util/index.mjs\"; // Types\n// Composables\nexport const makeScrollProps = propsFactory({\n  scrollTarget: {\n    type: String\n  },\n  scrollThreshold: {\n    type: [String, Number],\n    default: 300\n  }\n}, 'scroll');\nexport function useScroll(props) {\n  let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    canScroll\n  } = args;\n  let previousScroll = 0;\n  const target = ref(null);\n  const currentScroll = shallowRef(0);\n  const savedScroll = shallowRef(0);\n  const currentThreshold = shallowRef(0);\n  const isScrollActive = shallowRef(false);\n  const isScrollingUp = shallowRef(false);\n  const scrollThreshold = computed(() => {\n    return Number(props.scrollThreshold);\n  });\n\n  /**\n   * 1: at top\n   * 0: at threshold\n   */\n  const scrollRatio = computed(() => {\n    return clamp((scrollThreshold.value - currentScroll.value) / scrollThreshold.value || 0);\n  });\n  const onScroll = () => {\n    const targetEl = target.value;\n    if (!targetEl || canScroll && !canScroll.value) return;\n    previousScroll = currentScroll.value;\n    currentScroll.value = 'window' in targetEl ? targetEl.pageYOffset : targetEl.scrollTop;\n    isScrollingUp.value = currentScroll.value < previousScroll;\n    currentThreshold.value = Math.abs(currentScroll.value - scrollThreshold.value);\n  };\n  watch(isScrollingUp, () => {\n    savedScroll.value = savedScroll.value || currentScroll.value;\n  });\n  watch(isScrollActive, () => {\n    savedScroll.value = 0;\n  });\n  onMounted(() => {\n    watch(() => props.scrollTarget, scrollTarget => {\n      const newTarget = scrollTarget ? document.querySelector(scrollTarget) : window;\n      if (!newTarget) {\n        consoleWarn(`Unable to locate element with identifier ${scrollTarget}`);\n        return;\n      }\n      if (newTarget === target.value) return;\n      target.value?.removeEventListener('scroll', onScroll);\n      target.value = newTarget;\n      target.value.addEventListener('scroll', onScroll, {\n        passive: true\n      });\n    }, {\n      immediate: true\n    });\n  });\n  onBeforeUnmount(() => {\n    target.value?.removeEventListener('scroll', onScroll);\n  });\n\n  // Do we need this? If yes - seems that\n  // there's no need to expose onScroll\n  canScroll && watch(canScroll, onScroll, {\n    immediate: true\n  });\n  return {\n    scrollThreshold,\n    currentScroll,\n    currentThreshold,\n    isScrollActive,\n    scrollRatio,\n    // required only for testing\n    // probably can be removed\n    // later (2 chars chlng)\n    isScrollingUp,\n    savedScroll\n  };\n}\n//# sourceMappingURL=scroll.mjs.map",
      "start": 1721074021746,
      "end": 1721074021800,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1721074021801,
      "end": 1721074021801,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1721074021801,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1721074021802,
      "end": 1721074021802,
      "order": "normal"
    }
  ]
}
