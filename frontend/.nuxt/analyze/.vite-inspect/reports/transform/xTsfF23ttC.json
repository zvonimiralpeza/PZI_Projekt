{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/composables/nested/nested.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Composables\nimport { useProxiedModel } from \"../proxiedModel.mjs\"; // Utilities\nimport { computed, inject, onBeforeUnmount, provide, ref, shallowRef, toRaw } from 'vue';\nimport { listOpenStrategy, multipleOpenStrategy, singleOpenStrategy } from \"./openStrategies.mjs\";\nimport { classicSelectStrategy, independentSelectStrategy, independentSingleSelectStrategy, leafSelectStrategy, leafSingleSelectStrategy } from \"./selectStrategies.mjs\";\nimport { getCurrentInstance, getUid, propsFactory } from \"../../util/index.mjs\"; // Types\nexport const VNestedSymbol = Symbol.for('vuetify:nested');\nexport const emptyNested = {\n  id: shallowRef(),\n  root: {\n    register: () => null,\n    unregister: () => null,\n    parents: ref(new Map()),\n    children: ref(new Map()),\n    open: () => null,\n    openOnSelect: () => null,\n    select: () => null,\n    opened: ref(new Set()),\n    selected: ref(new Map()),\n    selectedValues: ref([])\n  }\n};\nexport const makeNestedProps = propsFactory({\n  selectStrategy: [String, Function],\n  openStrategy: [String, Object],\n  opened: Array,\n  selected: Array,\n  mandatory: Boolean\n}, 'nested');\nexport const useNested = props => {\n  let isUnmounted = false;\n  const children = ref(new Map());\n  const parents = ref(new Map());\n  const opened = useProxiedModel(props, 'opened', props.opened, v => new Set(v), v => [...v.values()]);\n  const selectStrategy = computed(() => {\n    if (typeof props.selectStrategy === 'object') return props.selectStrategy;\n    switch (props.selectStrategy) {\n      case 'single-leaf':\n        return leafSingleSelectStrategy(props.mandatory);\n      case 'leaf':\n        return leafSelectStrategy(props.mandatory);\n      case 'independent':\n        return independentSelectStrategy(props.mandatory);\n      case 'single-independent':\n        return independentSingleSelectStrategy(props.mandatory);\n      case 'classic':\n      default:\n        return classicSelectStrategy(props.mandatory);\n    }\n  });\n  const openStrategy = computed(() => {\n    if (typeof props.openStrategy === 'object') return props.openStrategy;\n    switch (props.openStrategy) {\n      case 'list':\n        return listOpenStrategy;\n      case 'single':\n        return singleOpenStrategy;\n      case 'multiple':\n      default:\n        return multipleOpenStrategy;\n    }\n  });\n  const selected = useProxiedModel(props, 'selected', props.selected, v => selectStrategy.value.in(v, children.value, parents.value), v => selectStrategy.value.out(v, children.value, parents.value));\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n  function getPath(id) {\n    const path = [];\n    let parent = id;\n    while (parent != null) {\n      path.unshift(parent);\n      parent = parents.value.get(parent);\n    }\n    return path;\n  }\n  const vm = getCurrentInstance('nested');\n  const nested = {\n    id: shallowRef(),\n    root: {\n      opened,\n      selected,\n      selectedValues: computed(() => {\n        const arr = [];\n        for (const [key, value] of selected.value.entries()) {\n          if (value === 'on') arr.push(key);\n        }\n        return arr;\n      }),\n      register: (id, parentId, isGroup) => {\n        parentId && id !== parentId && parents.value.set(id, parentId);\n        isGroup && children.value.set(id, []);\n        if (parentId != null) {\n          children.value.set(parentId, [...(children.value.get(parentId) || []), id]);\n        }\n      },\n      unregister: id => {\n        if (isUnmounted) return;\n        children.value.delete(id);\n        const parent = parents.value.get(id);\n        if (parent) {\n          const list = children.value.get(parent) ?? [];\n          children.value.set(parent, list.filter(child => child !== id));\n        }\n        parents.value.delete(id);\n        opened.value.delete(id);\n      },\n      open: (id, value, event) => {\n        vm.emit('click:open', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newOpened = openStrategy.value.open({\n          id,\n          value,\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      openOnSelect: (id, value, event) => {\n        const newOpened = openStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          opened: new Set(opened.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newOpened && (opened.value = newOpened);\n      },\n      select: (id, value, event) => {\n        vm.emit('click:select', {\n          id,\n          value,\n          path: getPath(id),\n          event\n        });\n        const newSelected = selectStrategy.value.select({\n          id,\n          value,\n          selected: new Map(selected.value),\n          children: children.value,\n          parents: parents.value,\n          event\n        });\n        newSelected && (selected.value = newSelected);\n        nested.root.openOnSelect(id, value, event);\n      },\n      children,\n      parents\n    }\n  };\n  provide(VNestedSymbol, nested);\n  return nested.root;\n};\nexport const useNestedItem = (id, isGroup) => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  const uidSymbol = Symbol(getUid());\n  const computedId = computed(() => id.value !== undefined ? id.value : uidSymbol);\n  const item = {\n    ...parent,\n    id: computedId,\n    open: (open, e) => parent.root.open(computedId.value, open, e),\n    openOnSelect: (open, e) => parent.root.openOnSelect(computedId.value, open, e),\n    isOpen: computed(() => parent.root.opened.value.has(computedId.value)),\n    parent: computed(() => parent.root.parents.value.get(computedId.value)),\n    select: (selected, e) => parent.root.select(computedId.value, selected, e),\n    isSelected: computed(() => parent.root.selected.value.get(toRaw(computedId.value)) === 'on'),\n    isIndeterminate: computed(() => parent.root.selected.value.get(computedId.value) === 'indeterminate'),\n    isLeaf: computed(() => !parent.root.children.value.get(computedId.value)),\n    isGroupActivator: parent.isGroupActivator\n  };\n  !parent.isGroupActivator && parent.root.register(computedId.value, parent.id.value, isGroup);\n  onBeforeUnmount(() => {\n    !parent.isGroupActivator && parent.root.unregister(computedId.value);\n  });\n  isGroup && provide(VNestedSymbol, item);\n  return item;\n};\nexport const useNestedGroupActivator = () => {\n  const parent = inject(VNestedSymbol, emptyNested);\n  provide(VNestedSymbol, {\n    ...parent,\n    isGroupActivator: true\n  });\n};\n//# sourceMappingURL=nested.mjs.map",
      "start": 1726415482622,
      "end": 1726415482997,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1726415482997,
      "end": 1726415482997,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726415482998,
      "end": 1726415482998,
      "order": "normal"
    }
  ]
}
