{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VTextField/VTextField.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { Fragment as _Fragment, withDirectives as _withDirectives, createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\";\n// Styles\nimport \"./VTextField.css\";\n\n// Components\nimport { VCounter } from \"../VCounter/VCounter.mjs\";\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\"; // Composables\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue';\nimport { callEvent, filterInputAttrs, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: [Number, Function],\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  role: String,\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelModifiers: Object,\n  ...makeVInputProps(),\n  ...makeVFieldProps()\n}, 'VTextField');\nexport const VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: makeVTextFieldProps(),\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : typeof props.counterValue === 'number' ? props.counterValue : (model.value ?? '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant));\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const inputRef = ref();\n    const isActive = computed(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value || props.active);\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus();\n      }\n      if (!isFocused.value) focus();\n    }\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n      if (e.target === inputRef.value) return;\n      onFocus();\n      e.preventDefault();\n    }\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = null;\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n      if (props.modelModifiers?.trim && ['text', 'search', 'password', 'tel', 'url'].includes(props.type)) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter !== false && props.counter != null);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const {\n        modelValue: _,\n        ...inputProps\n      } = VInput.filterProps(props);\n      const fieldProps = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-input--plain-underlined': isPlainOrUnderlined.value\n        }, props.class],\n        \"style\": props.style\n      }, rootAttrs, inputProps, {\n        \"centerAffix\": !isPlainOrUnderlined.value,\n        \"focused\": isFocused.value\n      }), {\n        ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": onControlMousedown,\n            \"onClick\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": props.role\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), {\n            ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              const inputNode = _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"name\": props.name,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]);\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [_createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix__text\"\n              }, [props.prefix])]), slots.default ? _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"data-no-activator\": \"\"\n              }, [slots.default(), inputNode]) : cloneVNode(inputNode, {\n                class: fieldClass\n              }), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [_createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix__text\"\n              }, [props.suffix])])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef);\n  }\n});\n//# sourceMappingURL=VTextField.mjs.map",
      "start": 1726412120105,
      "end": 1726412120288,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1726412120288,
      "end": 1726412120288,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1726412120288,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726412120289,
      "end": 1726412120289,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726412120289,
      "end": 1726412120290,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726412120290,
      "end": 1726412120290,
      "order": "normal"
    }
  ]
}
