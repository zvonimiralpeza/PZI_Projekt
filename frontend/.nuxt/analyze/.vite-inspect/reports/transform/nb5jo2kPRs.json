{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/pages/login.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\r\n  <div>\r\n    <v-container>\r\n      <v-row justify=\"center\">\r\n        <v-col cols=\"12\" sm=\"8\" md=\"6\">\r\n          <v-card>\r\n            <v-card-title class=\"text-h5 text-center\" style=\"color: #2b9300;\">Prijava</v-card-title>\r\n            <v-card-text>\r\n              <v-form @submit.prevent=\"submitForm\">\r\n                <v-text-field v-model=\"email\" label=\"Email\" required persistent></v-text-field>\r\n                <v-text-field v-model=\"lozinka\" label=\"Lozinka\" type=\"password\" required persistent autocomplete=\"current-password\"></v-text-field>\r\n\r\n                <v-btn type=\"submit\" color=\"green\">Prijavi se</v-btn>\r\n              </v-form>\r\n\r\n              <!-- Prikazivanje poruka o uspjehu ili pogrešci -->\r\n              <v-alert v-if=\"message && !isSuccessDialogOpen\" :type=\"alertType\" class=\"mt-4\">\r\n                {{ message }}\r\n              </v-alert>\r\n            </v-card-text>\r\n          </v-card>\r\n        </v-col>\r\n      </v-row>\r\n    </v-container>\r\n\r\n    <!-- Dijalog za uspješan login -->\r\n    <v-dialog v-model=\"isSuccessDialogOpen\" max-width=\"400px\">\r\n      <v-card>\r\n        <v-card-title class=\"headline\">Uspješno prijavljivanje</v-card-title>\r\n        <v-card-text>\r\n          <p>Uspješno ste se prijavili!</p>\r\n        </v-card-text>\r\n        <v-card-actions>\r\n          <v-btn color=\"green\" text @click=\"closeSuccessDialog\">Zatvori</v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </v-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapWritableState } from 'pinia';\r\nimport { useUsersStore } from '../stores/users.js';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      lozinka: '',\r\n      message: '', // Poruka za korisnika\r\n      alertType: '', // Tip poruke: 'success' ili 'error'\r\n      isSuccessDialogOpen: false, // Stanje dijaloga\r\n    };\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n      try {\r\n        // Provjeri da li su svi podaci uneseni\r\n        if (!this.email || !this.lozinka) {\r\n          this.message = 'Molimo unesite sve podatke.';\r\n          this.alertType = 'error';\r\n          return; // Prekini izvršavanje funkcije\r\n        }\r\n\r\n        const response = await $fetch(`${this.$config.public.BASE_URL}/login`, {\r\n          method: 'POST',\r\n          body: {\r\n            email: this.email,\r\n            password: this.lozinka\r\n          }\r\n        });\r\n\r\n        // Provjeri odgovor\r\n        console.log(response)\r\n        if (response.user) {\r\n          this.message = 'Uspješno ste prijavljeni!';\r\n          this.alertType = 'success';\r\n          this.user = response.user;\r\n\r\n          // Spremanje odgovora u localStorage\r\n          localStorage.setItem('user', JSON.stringify(response));\r\n\r\n          // Otvori dijalog za uspješnu prijavu\r\n          this.isSuccessDialogOpen = true;\r\n\r\n          // Otići na naslovnu stranicu nakon što se dijalog zatvori\r\n          setTimeout(() => {\r\n            this.$router.push('/');\r\n          }, 2000); // Kašnjenje od 2 sekunde prije nego što se preusmjeri na početnu stranicu\r\n        } else {\r\n          this.message = 'Neuspješna prijava. Provjerite vaše podatke.';\r\n          this.alertType = 'error';\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.message = 'Došlo je do greške prilikom prijave. Pokušajte ponovo.';\r\n        this.alertType = 'error';\r\n      }\r\n    },\r\n    closeSuccessDialog() {\r\n      this.isSuccessDialogOpen = false;\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapWritableState(useUsersStore, ['user'])\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Vaši stilovi */\r\n</style>\r\n",
      "start": 1726158880708,
      "end": 1726158881309,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1726158881309,
      "end": 1726158881309,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\r\nimport { mapWritableState } from 'pinia';\r\nimport { useUsersStore } from '../stores/users.js';\r\n\r\nconst _sfc_main = {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      lozinka: '',\r\n      message: '', // Poruka za korisnika\r\n      alertType: '', // Tip poruke: 'success' ili 'error'\r\n      isSuccessDialogOpen: false, // Stanje dijaloga\r\n    };\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n      try {\r\n        // Provjeri da li su svi podaci uneseni\r\n        if (!this.email || !this.lozinka) {\r\n          this.message = 'Molimo unesite sve podatke.';\r\n          this.alertType = 'error';\r\n          return; // Prekini izvršavanje funkcije\r\n        }\r\n\r\n        const response = await $fetch(`${this.$config.public.BASE_URL}/login`, {\r\n          method: 'POST',\r\n          body: {\r\n            email: this.email,\r\n            password: this.lozinka\r\n          }\r\n        });\r\n\r\n        // Provjeri odgovor\r\n        console.log(response)\r\n        if (response.user) {\r\n          this.message = 'Uspješno ste prijavljeni!';\r\n          this.alertType = 'success';\r\n          this.user = response.user;\r\n\r\n          // Spremanje odgovora u localStorage\r\n          localStorage.setItem('user', JSON.stringify(response));\r\n\r\n          // Otvori dijalog za uspješnu prijavu\r\n          this.isSuccessDialogOpen = true;\r\n\r\n          // Otići na naslovnu stranicu nakon što se dijalog zatvori\r\n          setTimeout(() => {\r\n            this.$router.push('/');\r\n          }, 2000); // Kašnjenje od 2 sekunde prije nego što se preusmjeri na početnu stranicu\r\n        } else {\r\n          this.message = 'Neuspješna prijava. Provjerite vaše podatke.';\r\n          this.alertType = 'error';\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.message = 'Došlo je do greške prilikom prijave. Pokušajte ponovo.';\r\n        this.alertType = 'error';\r\n      }\r\n    },\r\n    closeSuccessDialog() {\r\n      this.isSuccessDialogOpen = false;\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapWritableState(useUsersStore, ['user'])\r\n  }\r\n};\r\n\nimport { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Uspješno ste se prijavili!\", -1)\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_title = _resolveComponent(\"v-card-title\")\n  const _component_v_text_field = _resolveComponent(\"v-text-field\")\n  const _component_v_btn = _resolveComponent(\"v-btn\")\n  const _component_v_form = _resolveComponent(\"v-form\")\n  const _component_v_alert = _resolveComponent(\"v-alert\")\n  const _component_v_card_text = _resolveComponent(\"v-card-text\")\n  const _component_v_card = _resolveComponent(\"v-card\")\n  const _component_v_col = _resolveComponent(\"v-col\")\n  const _component_v_row = _resolveComponent(\"v-row\")\n  const _component_v_container = _resolveComponent(\"v-container\")\n  const _component_v_card_actions = _resolveComponent(\"v-card-actions\")\n  const _component_v_dialog = _resolveComponent(\"v-dialog\")\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _createVNode(_component_v_container, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_v_row, { justify: \"center\" }, {\n          default: _withCtx(() => [\n            _createVNode(_component_v_col, {\n              cols: \"12\",\n              sm: \"8\",\n              md: \"6\"\n            }, {\n              default: _withCtx(() => [\n                _createVNode(_component_v_card, null, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_v_card_title, {\n                      class: \"text-h5 text-center\",\n                      style: {\"color\":\"#2b9300\"}\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(\"Prijava\")\n                      ]),\n                      _: 1\n                    }),\n                    _createVNode(_component_v_card_text, null, {\n                      default: _withCtx(() => [\n                        _createVNode(_component_v_form, {\n                          onSubmit: _withModifiers($options.submitForm, [\"prevent\"])\n                        }, {\n                          default: _withCtx(() => [\n                            _createVNode(_component_v_text_field, {\n                              modelValue: $data.email,\n                              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => (($data.email) = $event)),\n                              label: \"Email\",\n                              required: \"\",\n                              persistent: \"\"\n                            }, null, 8, [\"modelValue\"]),\n                            _createVNode(_component_v_text_field, {\n                              modelValue: $data.lozinka,\n                              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => (($data.lozinka) = $event)),\n                              label: \"Lozinka\",\n                              type: \"password\",\n                              required: \"\",\n                              persistent: \"\",\n                              autocomplete: \"current-password\"\n                            }, null, 8, [\"modelValue\"]),\n                            _createVNode(_component_v_btn, {\n                              type: \"submit\",\n                              color: \"green\"\n                            }, {\n                              default: _withCtx(() => [\n                                _createTextVNode(\"Prijavi se\")\n                              ]),\n                              _: 1\n                            })\n                          ]),\n                          _: 1\n                        }, 8, [\"onSubmit\"]),\n                        ($data.message && !$data.isSuccessDialogOpen)\n                          ? (_openBlock(), _createBlock(_component_v_alert, {\n                              key: 0,\n                              type: $data.alertType,\n                              class: \"mt-4\"\n                            }, {\n                              default: _withCtx(() => [\n                                _createTextVNode(_toDisplayString($data.message), 1)\n                              ]),\n                              _: 1\n                            }, 8, [\"type\"]))\n                          : _createCommentVNode(\"\", true)\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_v_dialog, {\n      modelValue: $data.isSuccessDialogOpen,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => (($data.isSuccessDialogOpen) = $event)),\n      \"max-width\": \"400px\"\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_v_card, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_v_card_title, { class: \"headline\" }, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Uspješno prijavljivanje\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_v_card_text, null, {\n              default: _withCtx(() => [\n                _hoisted_1\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_v_card_actions, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_v_btn, {\n                  color: \"green\",\n                  text: \"\",\n                  onClick: $options.closeSuccessDialog\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"Zatvori\")\n                  ]),\n                  _: 1\n                }, 8, [\"onClick\"])\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }, 8, [\"modelValue\"])\n  ]))\n}\n\nimport \"C:/Users/DT User/Desktop/ProjektPZI/frontend/pages/login.vue?vue&type=style&index=0&lang.css\"\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1726158881309,
      "end": 1726158881313,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "result": "\r\nimport { mapWritableState } from 'pinia';\r\nimport { useUsersStore } from '../stores/users.js';\r\n\r\nconst _sfc_main = {\r\n  data() {\r\n    return {\r\n      email: '',\r\n      lozinka: '',\r\n      message: '', // Poruka za korisnika\r\n      alertType: '', // Tip poruke: 'success' ili 'error'\r\n      isSuccessDialogOpen: false, // Stanje dijaloga\r\n    };\r\n  },\r\n  methods: {\r\n    async submitForm() {\r\n      try {\r\n        // Provjeri da li su svi podaci uneseni\r\n        if (!this.email || !this.lozinka) {\r\n          this.message = 'Molimo unesite sve podatke.';\r\n          this.alertType = 'error';\r\n          return; // Prekini izvršavanje funkcije\r\n        }\r\n\r\n        const response = await $fetch(`${this.$config.public.BASE_URL}/login`, {\r\n          method: 'POST',\r\n          body: {\r\n            email: this.email,\r\n            password: this.lozinka\r\n          }\r\n        });\r\n\r\n        // Provjeri odgovor\r\n        console.log(response)\r\n        if (response.user) {\r\n          this.message = 'Uspješno ste prijavljeni!';\r\n          this.alertType = 'success';\r\n          this.user = response.user;\r\n\r\n          // Spremanje odgovora u localStorage\r\n          localStorage.setItem('user', JSON.stringify(response));\r\n\r\n          // Otvori dijalog za uspješnu prijavu\r\n          this.isSuccessDialogOpen = true;\r\n\r\n          // Otići na naslovnu stranicu nakon što se dijalog zatvori\r\n          setTimeout(() => {\r\n            this.$router.push('/');\r\n          }, 2000); // Kašnjenje od 2 sekunde prije nego što se preusmjeri na početnu stranicu\r\n        } else {\r\n          this.message = 'Neuspješna prijava. Provjerite vaše podatke.';\r\n          this.alertType = 'error';\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n        this.message = 'Došlo je do greške prilikom prijave. Pokušajte ponovo.';\r\n        this.alertType = 'error';\r\n      }\r\n    },\r\n    closeSuccessDialog() {\r\n      this.isSuccessDialogOpen = false;\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapWritableState(useUsersStore, ['user'])\r\n  }\r\n};\r\n\nimport { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Uspješno ste se prijavili!\", -1)\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n                                                                   \n                                                                   \n                                                     \n                                                       \n                                                         \n                                                                 \n                                                       \n                                                     \n                                                     \n                                                                 \n                                                                       \n                                                           \n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _createVNode(_component_v_container, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_v_row, { justify: \"center\" }, {\n          default: _withCtx(() => [\n            _createVNode(_component_v_col, {\n              cols: \"12\",\n              sm: \"8\",\n              md: \"6\"\n            }, {\n              default: _withCtx(() => [\n                _createVNode(_component_v_card, null, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_v_card_title, {\n                      class: \"text-h5 text-center\",\n                      style: {\"color\":\"#2b9300\"}\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(\"Prijava\")\n                      ]),\n                      _: 1\n                    }),\n                    _createVNode(_component_v_card_text, null, {\n                      default: _withCtx(() => [\n                        _createVNode(_component_v_form, {\n                          onSubmit: _withModifiers($options.submitForm, [\"prevent\"])\n                        }, {\n                          default: _withCtx(() => [\n                            _createVNode(_component_v_text_field, {\n                              modelValue: $data.email,\n                              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => (($data.email) = $event)),\n                              label: \"Email\",\n                              required: \"\",\n                              persistent: \"\"\n                            }, null, 8, [\"modelValue\"]),\n                            _createVNode(_component_v_text_field, {\n                              modelValue: $data.lozinka,\n                              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => (($data.lozinka) = $event)),\n                              label: \"Lozinka\",\n                              type: \"password\",\n                              required: \"\",\n                              persistent: \"\",\n                              autocomplete: \"current-password\"\n                            }, null, 8, [\"modelValue\"]),\n                            _createVNode(_component_v_btn, {\n                              type: \"submit\",\n                              color: \"green\"\n                            }, {\n                              default: _withCtx(() => [\n                                _createTextVNode(\"Prijavi se\")\n                              ]),\n                              _: 1\n                            })\n                          ]),\n                          _: 1\n                        }, 8, [\"onSubmit\"]),\n                        ($data.message && !$data.isSuccessDialogOpen)\n                          ? (_openBlock(), _createBlock(_component_v_alert, {\n                              key: 0,\n                              type: $data.alertType,\n                              class: \"mt-4\"\n                            }, {\n                              default: _withCtx(() => [\n                                _createTextVNode(_toDisplayString($data.message), 1)\n                              ]),\n                              _: 1\n                            }, 8, [\"type\"]))\n                          : _createCommentVNode(\"\", true)\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_v_dialog, {\n      modelValue: $data.isSuccessDialogOpen,\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => (($data.isSuccessDialogOpen) = $event)),\n      \"max-width\": \"400px\"\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_v_card, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_v_card_title, { class: \"headline\" }, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Uspješno prijavljivanje\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_v_card_text, null, {\n              default: _withCtx(() => [\n                _hoisted_1\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_v_card_actions, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_v_btn, {\n                  color: \"green\",\n                  text: \"\",\n                  onClick: $options.closeSuccessDialog\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"Zatvori\")\n                  ]),\n                  _: 1\n                }, 8, [\"onClick\"])\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }, 8, [\"modelValue\"])\n  ]))\n}\n\nimport \"C:/Users/DT User/Desktop/ProjektPZI/frontend/pages/login.vue?vue&type=style&index=0&lang.css\"\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])\n\n/* Vuetify */\nimport { VAlert as _component_v_alert } from \"vuetify/lib/components/VAlert/index.mjs\"\nimport { VBtn as _component_v_btn } from \"vuetify/lib/components/VBtn/index.mjs\"\nimport { VCardTitle as _component_v_card_title, VCardText as _component_v_card_text, VCard as _component_v_card, VCardActions as _component_v_card_actions } from \"vuetify/lib/components/VCard/index.mjs\"\nimport { VDialog as _component_v_dialog } from \"vuetify/lib/components/VDialog/index.mjs\"\nimport { VForm as _component_v_form } from \"vuetify/lib/components/VForm/index.mjs\"\nimport { VCol as _component_v_col, VRow as _component_v_row, VContainer as _component_v_container } from \"vuetify/lib/components/VGrid/index.mjs\"\nimport { VTextField as _component_v_text_field } from \"vuetify/lib/components/VTextField/index.mjs\"\n\n",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal",
      "sourcemaps": null
    },
    {
      "name": "nuxt:components:imports",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1726158881313,
      "end": 1726158881313,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1726158881313,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1726158881314,
      "end": 1726158881314,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1726158881314,
      "end": 1726158881316,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1726158881316,
      "end": 1726158881316,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1726158881316,
      "end": 1726158881316,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1726158881316,
      "end": 1726158881316,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1726158881316,
      "end": 1726158881317,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1726158881317,
      "end": 1726158881317,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1726158881317,
      "end": 1726158881317,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1726158881317,
      "end": 1726158881317,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1726158881317,
      "end": 1726158881317,
      "order": "normal"
    }
  ]
}
