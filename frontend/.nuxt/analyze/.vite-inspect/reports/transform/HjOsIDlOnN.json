{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VProgressLinear/VProgressLinear.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { createVNode as _createVNode } from \"vue\";\n// Styles\nimport \"./VProgressLinear.css\";\n\n// Composables\nimport { useBackgroundColor, useTextColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { makeLocationProps, useLocation } from \"../../composables/location.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\"; // Utilities\nimport { computed, Transition } from 'vue';\nimport { convertToUnit, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVProgressLinearProps = propsFactory({\n  absolute: Boolean,\n  active: {\n    type: Boolean,\n    default: true\n  },\n  bgColor: String,\n  bgOpacity: [Number, String],\n  bufferValue: {\n    type: [Number, String],\n    default: 0\n  },\n  clickable: Boolean,\n  color: String,\n  height: {\n    type: [Number, String],\n    default: 4\n  },\n  indeterminate: Boolean,\n  max: {\n    type: [Number, String],\n    default: 100\n  },\n  modelValue: {\n    type: [Number, String],\n    default: 0\n  },\n  reverse: Boolean,\n  stream: Boolean,\n  striped: Boolean,\n  roundedBar: Boolean,\n  ...makeComponentProps(),\n  ...makeLocationProps({\n    location: 'top'\n  }),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeThemeProps()\n}, 'VProgressLinear');\nexport const VProgressLinear = genericComponent()({\n  name: 'VProgressLinear',\n  props: makeVProgressLinearProps(),\n  emits: {\n    'update:modelValue': value => true\n  },\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const progress = useProxiedModel(props, 'modelValue');\n    const {\n      isRtl,\n      rtlClasses\n    } = useRtl();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      locationStyles\n    } = useLocation(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(props, 'color');\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(computed(() => props.bgColor || props.color));\n    const {\n      backgroundColorClasses: barColorClasses,\n      backgroundColorStyles: barColorStyles\n    } = useBackgroundColor(props, 'color');\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    const max = computed(() => parseInt(props.max, 10));\n    const height = computed(() => parseInt(props.height, 10));\n    const normalizedBuffer = computed(() => parseFloat(props.bufferValue) / max.value * 100);\n    const normalizedValue = computed(() => parseFloat(progress.value) / max.value * 100);\n    const isReversed = computed(() => isRtl.value !== props.reverse);\n    const transition = computed(() => props.indeterminate ? 'fade-transition' : 'slide-x-transition');\n    const opacity = computed(() => {\n      return props.bgOpacity == null ? props.bgOpacity : parseFloat(props.bgOpacity);\n    });\n    function handleClick(e) {\n      if (!intersectionRef.value) return;\n      const {\n        left,\n        right,\n        width\n      } = intersectionRef.value.getBoundingClientRect();\n      const value = isReversed.value ? width - e.clientX + (right - width) : e.clientX - left;\n      progress.value = Math.round(value / width * max.value);\n    }\n    useRender(() => _createVNode(props.tag, {\n      \"ref\": intersectionRef,\n      \"class\": ['v-progress-linear', {\n        'v-progress-linear--absolute': props.absolute,\n        'v-progress-linear--active': props.active && isIntersecting.value,\n        'v-progress-linear--reverse': isReversed.value,\n        'v-progress-linear--rounded': props.rounded,\n        'v-progress-linear--rounded-bar': props.roundedBar,\n        'v-progress-linear--striped': props.striped\n      }, roundedClasses.value, themeClasses.value, rtlClasses.value, props.class],\n      \"style\": [{\n        bottom: props.location === 'bottom' ? 0 : undefined,\n        top: props.location === 'top' ? 0 : undefined,\n        height: props.active ? convertToUnit(height.value) : 0,\n        '--v-progress-linear-height': convertToUnit(height.value),\n        ...locationStyles.value\n      }, props.style],\n      \"role\": \"progressbar\",\n      \"aria-hidden\": props.active ? 'false' : 'true',\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": props.max,\n      \"aria-valuenow\": props.indeterminate ? undefined : normalizedValue.value,\n      \"onClick\": props.clickable && handleClick\n    }, {\n      default: () => [props.stream && _createVNode(\"div\", {\n        \"key\": \"stream\",\n        \"class\": ['v-progress-linear__stream', textColorClasses.value],\n        \"style\": {\n          ...textColorStyles.value,\n          [isReversed.value ? 'left' : 'right']: convertToUnit(-height.value),\n          borderTop: `${convertToUnit(height.value / 2)} dotted`,\n          opacity: opacity.value,\n          top: `calc(50% - ${convertToUnit(height.value / 4)})`,\n          width: convertToUnit(100 - normalizedBuffer.value, '%'),\n          '--v-progress-linear-stream-to': convertToUnit(height.value * (isReversed.value ? 1 : -1))\n        }\n      }, null), _createVNode(\"div\", {\n        \"class\": ['v-progress-linear__background', backgroundColorClasses.value],\n        \"style\": [backgroundColorStyles.value, {\n          opacity: opacity.value,\n          width: convertToUnit(!props.stream ? 100 : normalizedBuffer.value, '%')\n        }]\n      }, null), _createVNode(Transition, {\n        \"name\": transition.value\n      }, {\n        default: () => [!props.indeterminate ? _createVNode(\"div\", {\n          \"class\": ['v-progress-linear__determinate', barColorClasses.value],\n          \"style\": [barColorStyles.value, {\n            width: convertToUnit(normalizedValue.value, '%')\n          }]\n        }, null) : _createVNode(\"div\", {\n          \"class\": \"v-progress-linear__indeterminate\"\n        }, [['long', 'short'].map(bar => _createVNode(\"div\", {\n          \"key\": bar,\n          \"class\": ['v-progress-linear__indeterminate', bar, barColorClasses.value],\n          \"style\": barColorStyles.value\n        }, null))])]\n      }), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-progress-linear__content\"\n      }, [slots.default({\n        value: normalizedValue.value,\n        buffer: normalizedBuffer.value\n      })])]\n    }));\n    return {};\n  }\n});\n//# sourceMappingURL=VProgressLinear.mjs.map",
      "start": 1710361553460,
      "end": 1710361553781,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1710361553781,
      "end": 1710361553782,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1710361553782,
      "end": 1710361553782,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1710361553783,
      "end": 1710361553783,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1710361553783,
      "end": 1710361553784,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1710361553784,
      "end": 1710361553784,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1710361553784,
      "end": 1710361553784,
      "order": "normal"
    }
  ]
}
