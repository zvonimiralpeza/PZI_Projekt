{
  "resolvedId": "C:/Users/DT User/Desktop/ProjektPZI/frontend/node_modules/vuetify/lib/components/VOverlay/useActivator.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "// Components\nimport { VMenuSymbol } from \"../VMenu/shared.mjs\"; // Composables\nimport { makeDelayProps, useDelay } from \"../../composables/delay.mjs\"; // Utilities\nimport { computed, effectScope, inject, mergeProps, nextTick, onScopeDispose, ref, watch, watchEffect } from 'vue';\nimport { bindProps, getCurrentInstance, IN_BROWSER, matchesSelector, propsFactory, refElement, unbindProps } from \"../../util/index.mjs\"; // Types\nexport const makeActivatorProps = propsFactory({\n  target: [String, Object],\n  activator: [String, Object],\n  activatorProps: {\n    type: Object,\n    default: () => ({})\n  },\n  openOnClick: {\n    type: Boolean,\n    default: undefined\n  },\n  openOnHover: Boolean,\n  openOnFocus: {\n    type: Boolean,\n    default: undefined\n  },\n  closeOnContentClick: Boolean,\n  ...makeDelayProps()\n}, 'VOverlay-activator');\nexport function useActivator(props, _ref) {\n  let {\n    isActive,\n    isTop\n  } = _ref;\n  const vm = getCurrentInstance('useActivator');\n  const activatorEl = ref();\n  let isHovered = false;\n  let isFocused = false;\n  let firstEnter = true;\n  const openOnFocus = computed(() => props.openOnFocus || props.openOnFocus == null && props.openOnHover);\n  const openOnClick = computed(() => props.openOnClick || props.openOnClick == null && !props.openOnHover && !openOnFocus.value);\n  const {\n    runOpenDelay,\n    runCloseDelay\n  } = useDelay(props, value => {\n    if (value === (props.openOnHover && isHovered || openOnFocus.value && isFocused) && !(props.openOnHover && isActive.value && !isTop.value)) {\n      if (isActive.value !== value) {\n        firstEnter = true;\n      }\n      isActive.value = value;\n    }\n  });\n  const cursorTarget = ref();\n  const availableEvents = {\n    onClick: e => {\n      e.stopPropagation();\n      activatorEl.value = e.currentTarget || e.target;\n      if (!isActive.value) {\n        cursorTarget.value = [e.clientX, e.clientY];\n      }\n      isActive.value = !isActive.value;\n    },\n    onMouseenter: e => {\n      if (e.sourceCapabilities?.firesTouchEvents) return;\n      isHovered = true;\n      activatorEl.value = e.currentTarget || e.target;\n      runOpenDelay();\n    },\n    onMouseleave: e => {\n      isHovered = false;\n      runCloseDelay();\n    },\n    onFocus: e => {\n      if (matchesSelector(e.target, ':focus-visible') === false) return;\n      isFocused = true;\n      e.stopPropagation();\n      activatorEl.value = e.currentTarget || e.target;\n      runOpenDelay();\n    },\n    onBlur: e => {\n      isFocused = false;\n      e.stopPropagation();\n      runCloseDelay();\n    }\n  };\n  const activatorEvents = computed(() => {\n    const events = {};\n    if (openOnClick.value) {\n      events.onClick = availableEvents.onClick;\n    }\n    if (props.openOnHover) {\n      events.onMouseenter = availableEvents.onMouseenter;\n      events.onMouseleave = availableEvents.onMouseleave;\n    }\n    if (openOnFocus.value) {\n      events.onFocus = availableEvents.onFocus;\n      events.onBlur = availableEvents.onBlur;\n    }\n    return events;\n  });\n  const contentEvents = computed(() => {\n    const events = {};\n    if (props.openOnHover) {\n      events.onMouseenter = () => {\n        isHovered = true;\n        runOpenDelay();\n      };\n      events.onMouseleave = () => {\n        isHovered = false;\n        runCloseDelay();\n      };\n    }\n    if (openOnFocus.value) {\n      events.onFocusin = () => {\n        isFocused = true;\n        runOpenDelay();\n      };\n      events.onFocusout = () => {\n        isFocused = false;\n        runCloseDelay();\n      };\n    }\n    if (props.closeOnContentClick) {\n      const menu = inject(VMenuSymbol, null);\n      events.onClick = () => {\n        isActive.value = false;\n        menu?.closeParents();\n      };\n    }\n    return events;\n  });\n  const scrimEvents = computed(() => {\n    const events = {};\n    if (props.openOnHover) {\n      events.onMouseenter = () => {\n        if (firstEnter) {\n          isHovered = true;\n          firstEnter = false;\n          runOpenDelay();\n        }\n      };\n      events.onMouseleave = () => {\n        isHovered = false;\n        runCloseDelay();\n      };\n    }\n    return events;\n  });\n  watch(isTop, val => {\n    if (val && (props.openOnHover && !isHovered && (!openOnFocus.value || !isFocused) || openOnFocus.value && !isFocused && (!props.openOnHover || !isHovered))) {\n      isActive.value = false;\n    }\n  });\n  watch(isActive, val => {\n    if (!val) {\n      setTimeout(() => {\n        cursorTarget.value = undefined;\n      });\n    }\n  }, {\n    flush: 'post'\n  });\n  const activatorRef = ref();\n  watchEffect(() => {\n    if (!activatorRef.value) return;\n    nextTick(() => {\n      activatorEl.value = refElement(activatorRef.value);\n    });\n  });\n  const targetRef = ref();\n  const target = computed(() => {\n    if (props.target === 'cursor' && cursorTarget.value) return cursorTarget.value;\n    if (targetRef.value) return refElement(targetRef.value);\n    return getTarget(props.target, vm) || activatorEl.value;\n  });\n  const targetEl = computed(() => {\n    return Array.isArray(target.value) ? undefined : target.value;\n  });\n  let scope;\n  watch(() => !!props.activator, val => {\n    if (val && IN_BROWSER) {\n      scope = effectScope();\n      scope.run(() => {\n        _useActivator(props, vm, {\n          activatorEl,\n          activatorEvents\n        });\n      });\n    } else if (scope) {\n      scope.stop();\n    }\n  }, {\n    flush: 'post',\n    immediate: true\n  });\n  onScopeDispose(() => {\n    scope?.stop();\n  });\n  return {\n    activatorEl,\n    activatorRef,\n    target,\n    targetEl,\n    targetRef,\n    activatorEvents,\n    contentEvents,\n    scrimEvents\n  };\n}\nfunction _useActivator(props, vm, _ref2) {\n  let {\n    activatorEl,\n    activatorEvents\n  } = _ref2;\n  watch(() => props.activator, (val, oldVal) => {\n    if (oldVal && val !== oldVal) {\n      const activator = getActivator(oldVal);\n      activator && unbindActivatorProps(activator);\n    }\n    if (val) {\n      nextTick(() => bindActivatorProps());\n    }\n  }, {\n    immediate: true\n  });\n  watch(() => props.activatorProps, () => {\n    bindActivatorProps();\n  });\n  onScopeDispose(() => {\n    unbindActivatorProps();\n  });\n  function bindActivatorProps() {\n    let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getActivator();\n    let _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.activatorProps;\n    if (!el) return;\n    bindProps(el, mergeProps(activatorEvents.value, _props));\n  }\n  function unbindActivatorProps() {\n    let el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getActivator();\n    let _props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.activatorProps;\n    if (!el) return;\n    unbindProps(el, mergeProps(activatorEvents.value, _props));\n  }\n  function getActivator() {\n    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : props.activator;\n    const activator = getTarget(selector, vm);\n\n    // The activator should only be a valid element (Ignore comments and text nodes)\n    activatorEl.value = activator?.nodeType === Node.ELEMENT_NODE ? activator : undefined;\n    return activatorEl.value;\n  }\n}\nfunction getTarget(selector, vm) {\n  if (!selector) return;\n  let target;\n  if (selector === 'parent') {\n    let el = vm?.proxy?.$el?.parentNode;\n    while (el?.hasAttribute('data-no-activator')) {\n      el = el.parentNode;\n    }\n    target = el;\n  } else if (typeof selector === 'string') {\n    // Selector\n    target = document.querySelector(selector);\n  } else if ('$el' in selector) {\n    // Component (ref)\n    target = selector.$el;\n  } else {\n    // HTMLElement | Element | [x, y]\n    target = selector;\n  }\n  return target;\n}\n//# sourceMappingURL=useActivator.mjs.map",
      "start": 1720959837663,
      "end": 1720959837898,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "vuetify:import",
      "start": 1720959837898,
      "end": 1720959837898,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1720959837898,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1720959837899,
      "end": 1720959837899,
      "order": "normal"
    }
  ]
}
